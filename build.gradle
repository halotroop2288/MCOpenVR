plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


archivesBaseName = archives_base_name
version = "${mod_version}+openVR${openvr_version}-${minecraft_version}"
group = maven_group

repositories {
	jcenter()
	maven {
		name "HalfOf2"
		url "https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/"
	}
	maven {
		name "JITPack"
		url "https://jitpack.io/"
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modRuntime "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi "io.github.prospector:modmenu:${project.modmenu_version}" exclude group: "net.fabricmc.fabric-api"

	// Makes the game load faster while debugging at the cost of never being able to upgrade a world between MC versions
	modRuntime "com.github.SuperCoder7979:databreaker:715b589"

	// To manage the configuration
	include modApi ("me.shedaniel.cloth:config-2:4.8.3") exclude group: "net.fabricmc.fabric-api"
	include modApi ("me.sargunvohra.mcmods:autoconfig1u:3.3.1") exclude group: "net.fabricmc.fabric-api"

	// To load natives at the right time
	include modApi ("net.devtech:grossfabrichacks:6.1")
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier("sources")
	from sourceSets.main.allSource
}

jar {
	classifier("compile")
	from compileJava
	from processResources
	from "LICENSE"
	from "LICENSE.OPENVR"

	from ("openvr/bin/linux64/libopenvr_api.so") {
		into "linux-x86-64/"
	}
	from ("openvr/bin/win64/openvr_api.dll") {
		into "win32-x86-64/"
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
}
